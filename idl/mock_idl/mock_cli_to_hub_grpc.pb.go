// Code generated by MockGen. DO NOT EDIT.
// Source: cli_to_hub_grpc.pb.go

// Package mock_idl is a generated GoMock package.
package mock_idl

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	idl "github.com/greenplum-db/gpupgrade/idl"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockCliToHubClient is a mock of CliToHubClient interface.
type MockCliToHubClient struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHubClientMockRecorder
}

// MockCliToHubClientMockRecorder is the mock recorder for MockCliToHubClient.
type MockCliToHubClientMockRecorder struct {
	mock *MockCliToHubClient
}

// NewMockCliToHubClient creates a new mock instance.
func NewMockCliToHubClient(ctrl *gomock.Controller) *MockCliToHubClient {
	mock := &MockCliToHubClient{ctrl: ctrl}
	mock.recorder = &MockCliToHubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHubClient) EXPECT() *MockCliToHubClientMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCliToHubClient) Execute(ctx context.Context, in *idl.ExecuteRequest, opts ...grpc.CallOption) (idl.CliToHub_ExecuteClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(idl.CliToHub_ExecuteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCliToHubClientMockRecorder) Execute(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCliToHubClient)(nil).Execute), varargs...)
}

// Finalize mocks base method.
func (m *MockCliToHubClient) Finalize(ctx context.Context, in *idl.FinalizeRequest, opts ...grpc.CallOption) (idl.CliToHub_FinalizeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Finalize", varargs...)
	ret0, _ := ret[0].(idl.CliToHub_FinalizeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finalize indicates an expected call of Finalize.
func (mr *MockCliToHubClientMockRecorder) Finalize(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockCliToHubClient)(nil).Finalize), varargs...)
}

// GetConfig mocks base method.
func (m *MockCliToHubClient) GetConfig(ctx context.Context, in *idl.GetConfigRequest, opts ...grpc.CallOption) (*idl.GetConfigReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfig", varargs...)
	ret0, _ := ret[0].(*idl.GetConfigReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockCliToHubClientMockRecorder) GetConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockCliToHubClient)(nil).GetConfig), varargs...)
}

// Initialize mocks base method.
func (m *MockCliToHubClient) Initialize(ctx context.Context, in *idl.InitializeRequest, opts ...grpc.CallOption) (idl.CliToHub_InitializeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Initialize", varargs...)
	ret0, _ := ret[0].(idl.CliToHub_InitializeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize.
func (mr *MockCliToHubClientMockRecorder) Initialize(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockCliToHubClient)(nil).Initialize), varargs...)
}

// InitializeCreateCluster mocks base method.
func (m *MockCliToHubClient) InitializeCreateCluster(ctx context.Context, in *idl.InitializeCreateClusterRequest, opts ...grpc.CallOption) (idl.CliToHub_InitializeCreateClusterClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeCreateCluster", varargs...)
	ret0, _ := ret[0].(idl.CliToHub_InitializeCreateClusterClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeCreateCluster indicates an expected call of InitializeCreateCluster.
func (mr *MockCliToHubClientMockRecorder) InitializeCreateCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeCreateCluster", reflect.TypeOf((*MockCliToHubClient)(nil).InitializeCreateCluster), varargs...)
}

// RestartAgents mocks base method.
func (m *MockCliToHubClient) RestartAgents(ctx context.Context, in *idl.RestartAgentsRequest, opts ...grpc.CallOption) (*idl.RestartAgentsReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartAgents", varargs...)
	ret0, _ := ret[0].(*idl.RestartAgentsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartAgents indicates an expected call of RestartAgents.
func (mr *MockCliToHubClientMockRecorder) RestartAgents(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartAgents", reflect.TypeOf((*MockCliToHubClient)(nil).RestartAgents), varargs...)
}

// Revert mocks base method.
func (m *MockCliToHubClient) Revert(ctx context.Context, in *idl.RevertRequest, opts ...grpc.CallOption) (idl.CliToHub_RevertClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Revert", varargs...)
	ret0, _ := ret[0].(idl.CliToHub_RevertClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revert indicates an expected call of Revert.
func (mr *MockCliToHubClientMockRecorder) Revert(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revert", reflect.TypeOf((*MockCliToHubClient)(nil).Revert), varargs...)
}

// StopServices mocks base method.
func (m *MockCliToHubClient) StopServices(ctx context.Context, in *idl.StopServicesRequest, opts ...grpc.CallOption) (*idl.StopServicesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopServices", varargs...)
	ret0, _ := ret[0].(*idl.StopServicesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopServices indicates an expected call of StopServices.
func (mr *MockCliToHubClientMockRecorder) StopServices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServices", reflect.TypeOf((*MockCliToHubClient)(nil).StopServices), varargs...)
}

// MockCliToHub_InitializeClient is a mock of CliToHub_InitializeClient interface.
type MockCliToHub_InitializeClient struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_InitializeClientMockRecorder
}

// MockCliToHub_InitializeClientMockRecorder is the mock recorder for MockCliToHub_InitializeClient.
type MockCliToHub_InitializeClientMockRecorder struct {
	mock *MockCliToHub_InitializeClient
}

// NewMockCliToHub_InitializeClient creates a new mock instance.
func NewMockCliToHub_InitializeClient(ctrl *gomock.Controller) *MockCliToHub_InitializeClient {
	mock := &MockCliToHub_InitializeClient{ctrl: ctrl}
	mock.recorder = &MockCliToHub_InitializeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_InitializeClient) EXPECT() *MockCliToHub_InitializeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockCliToHub_InitializeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCliToHub_InitializeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCliToHub_InitializeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCliToHub_InitializeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_InitializeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_InitializeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockCliToHub_InitializeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCliToHub_InitializeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCliToHub_InitializeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockCliToHub_InitializeClient) Recv() (*idl.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idl.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCliToHub_InitializeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCliToHub_InitializeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_InitializeClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_InitializeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_InitializeClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_InitializeClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_InitializeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_InitializeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockCliToHub_InitializeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCliToHub_InitializeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCliToHub_InitializeClient)(nil).Trailer))
}

// MockCliToHub_InitializeCreateClusterClient is a mock of CliToHub_InitializeCreateClusterClient interface.
type MockCliToHub_InitializeCreateClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_InitializeCreateClusterClientMockRecorder
}

// MockCliToHub_InitializeCreateClusterClientMockRecorder is the mock recorder for MockCliToHub_InitializeCreateClusterClient.
type MockCliToHub_InitializeCreateClusterClientMockRecorder struct {
	mock *MockCliToHub_InitializeCreateClusterClient
}

// NewMockCliToHub_InitializeCreateClusterClient creates a new mock instance.
func NewMockCliToHub_InitializeCreateClusterClient(ctrl *gomock.Controller) *MockCliToHub_InitializeCreateClusterClient {
	mock := &MockCliToHub_InitializeCreateClusterClient{ctrl: ctrl}
	mock.recorder = &MockCliToHub_InitializeCreateClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_InitializeCreateClusterClient) EXPECT() *MockCliToHub_InitializeCreateClusterClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockCliToHub_InitializeCreateClusterClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCliToHub_InitializeCreateClusterClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCliToHub_InitializeCreateClusterClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_InitializeCreateClusterClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterClient)(nil).Context))
}

// Header mocks base method.
func (m *MockCliToHub_InitializeCreateClusterClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCliToHub_InitializeCreateClusterClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockCliToHub_InitializeCreateClusterClient) Recv() (*idl.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idl.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCliToHub_InitializeCreateClusterClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_InitializeCreateClusterClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_InitializeCreateClusterClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_InitializeCreateClusterClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_InitializeCreateClusterClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockCliToHub_InitializeCreateClusterClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCliToHub_InitializeCreateClusterClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterClient)(nil).Trailer))
}

// MockCliToHub_ExecuteClient is a mock of CliToHub_ExecuteClient interface.
type MockCliToHub_ExecuteClient struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_ExecuteClientMockRecorder
}

// MockCliToHub_ExecuteClientMockRecorder is the mock recorder for MockCliToHub_ExecuteClient.
type MockCliToHub_ExecuteClientMockRecorder struct {
	mock *MockCliToHub_ExecuteClient
}

// NewMockCliToHub_ExecuteClient creates a new mock instance.
func NewMockCliToHub_ExecuteClient(ctrl *gomock.Controller) *MockCliToHub_ExecuteClient {
	mock := &MockCliToHub_ExecuteClient{ctrl: ctrl}
	mock.recorder = &MockCliToHub_ExecuteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_ExecuteClient) EXPECT() *MockCliToHub_ExecuteClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockCliToHub_ExecuteClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCliToHub_ExecuteClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCliToHub_ExecuteClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCliToHub_ExecuteClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_ExecuteClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_ExecuteClient)(nil).Context))
}

// Header mocks base method.
func (m *MockCliToHub_ExecuteClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCliToHub_ExecuteClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCliToHub_ExecuteClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockCliToHub_ExecuteClient) Recv() (*idl.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idl.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCliToHub_ExecuteClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCliToHub_ExecuteClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_ExecuteClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_ExecuteClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_ExecuteClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_ExecuteClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_ExecuteClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_ExecuteClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockCliToHub_ExecuteClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCliToHub_ExecuteClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCliToHub_ExecuteClient)(nil).Trailer))
}

// MockCliToHub_FinalizeClient is a mock of CliToHub_FinalizeClient interface.
type MockCliToHub_FinalizeClient struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_FinalizeClientMockRecorder
}

// MockCliToHub_FinalizeClientMockRecorder is the mock recorder for MockCliToHub_FinalizeClient.
type MockCliToHub_FinalizeClientMockRecorder struct {
	mock *MockCliToHub_FinalizeClient
}

// NewMockCliToHub_FinalizeClient creates a new mock instance.
func NewMockCliToHub_FinalizeClient(ctrl *gomock.Controller) *MockCliToHub_FinalizeClient {
	mock := &MockCliToHub_FinalizeClient{ctrl: ctrl}
	mock.recorder = &MockCliToHub_FinalizeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_FinalizeClient) EXPECT() *MockCliToHub_FinalizeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockCliToHub_FinalizeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCliToHub_FinalizeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCliToHub_FinalizeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCliToHub_FinalizeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_FinalizeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_FinalizeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockCliToHub_FinalizeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCliToHub_FinalizeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCliToHub_FinalizeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockCliToHub_FinalizeClient) Recv() (*idl.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idl.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCliToHub_FinalizeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCliToHub_FinalizeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_FinalizeClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_FinalizeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_FinalizeClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_FinalizeClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_FinalizeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_FinalizeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockCliToHub_FinalizeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCliToHub_FinalizeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCliToHub_FinalizeClient)(nil).Trailer))
}

// MockCliToHub_RevertClient is a mock of CliToHub_RevertClient interface.
type MockCliToHub_RevertClient struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_RevertClientMockRecorder
}

// MockCliToHub_RevertClientMockRecorder is the mock recorder for MockCliToHub_RevertClient.
type MockCliToHub_RevertClientMockRecorder struct {
	mock *MockCliToHub_RevertClient
}

// NewMockCliToHub_RevertClient creates a new mock instance.
func NewMockCliToHub_RevertClient(ctrl *gomock.Controller) *MockCliToHub_RevertClient {
	mock := &MockCliToHub_RevertClient{ctrl: ctrl}
	mock.recorder = &MockCliToHub_RevertClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_RevertClient) EXPECT() *MockCliToHub_RevertClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockCliToHub_RevertClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCliToHub_RevertClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCliToHub_RevertClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCliToHub_RevertClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_RevertClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_RevertClient)(nil).Context))
}

// Header mocks base method.
func (m *MockCliToHub_RevertClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCliToHub_RevertClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCliToHub_RevertClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockCliToHub_RevertClient) Recv() (*idl.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*idl.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCliToHub_RevertClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCliToHub_RevertClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_RevertClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_RevertClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_RevertClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_RevertClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_RevertClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_RevertClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockCliToHub_RevertClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCliToHub_RevertClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCliToHub_RevertClient)(nil).Trailer))
}

// MockCliToHubServer is a mock of CliToHubServer interface.
type MockCliToHubServer struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHubServerMockRecorder
}

// MockCliToHubServerMockRecorder is the mock recorder for MockCliToHubServer.
type MockCliToHubServerMockRecorder struct {
	mock *MockCliToHubServer
}

// NewMockCliToHubServer creates a new mock instance.
func NewMockCliToHubServer(ctrl *gomock.Controller) *MockCliToHubServer {
	mock := &MockCliToHubServer{ctrl: ctrl}
	mock.recorder = &MockCliToHubServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHubServer) EXPECT() *MockCliToHubServerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCliToHubServer) Execute(arg0 *idl.ExecuteRequest, arg1 idl.CliToHub_ExecuteServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCliToHubServerMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCliToHubServer)(nil).Execute), arg0, arg1)
}

// Finalize mocks base method.
func (m *MockCliToHubServer) Finalize(arg0 *idl.FinalizeRequest, arg1 idl.CliToHub_FinalizeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finalize indicates an expected call of Finalize.
func (mr *MockCliToHubServerMockRecorder) Finalize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockCliToHubServer)(nil).Finalize), arg0, arg1)
}

// GetConfig mocks base method.
func (m *MockCliToHubServer) GetConfig(arg0 context.Context, arg1 *idl.GetConfigRequest) (*idl.GetConfigReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", arg0, arg1)
	ret0, _ := ret[0].(*idl.GetConfigReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockCliToHubServerMockRecorder) GetConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockCliToHubServer)(nil).GetConfig), arg0, arg1)
}

// Initialize mocks base method.
func (m *MockCliToHubServer) Initialize(arg0 *idl.InitializeRequest, arg1 idl.CliToHub_InitializeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockCliToHubServerMockRecorder) Initialize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockCliToHubServer)(nil).Initialize), arg0, arg1)
}

// InitializeCreateCluster mocks base method.
func (m *MockCliToHubServer) InitializeCreateCluster(arg0 *idl.InitializeCreateClusterRequest, arg1 idl.CliToHub_InitializeCreateClusterServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeCreateCluster", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeCreateCluster indicates an expected call of InitializeCreateCluster.
func (mr *MockCliToHubServerMockRecorder) InitializeCreateCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeCreateCluster", reflect.TypeOf((*MockCliToHubServer)(nil).InitializeCreateCluster), arg0, arg1)
}

// RestartAgents mocks base method.
func (m *MockCliToHubServer) RestartAgents(arg0 context.Context, arg1 *idl.RestartAgentsRequest) (*idl.RestartAgentsReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartAgents", arg0, arg1)
	ret0, _ := ret[0].(*idl.RestartAgentsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartAgents indicates an expected call of RestartAgents.
func (mr *MockCliToHubServerMockRecorder) RestartAgents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartAgents", reflect.TypeOf((*MockCliToHubServer)(nil).RestartAgents), arg0, arg1)
}

// Revert mocks base method.
func (m *MockCliToHubServer) Revert(arg0 *idl.RevertRequest, arg1 idl.CliToHub_RevertServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revert indicates an expected call of Revert.
func (mr *MockCliToHubServerMockRecorder) Revert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revert", reflect.TypeOf((*MockCliToHubServer)(nil).Revert), arg0, arg1)
}

// StopServices mocks base method.
func (m *MockCliToHubServer) StopServices(arg0 context.Context, arg1 *idl.StopServicesRequest) (*idl.StopServicesReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServices", arg0, arg1)
	ret0, _ := ret[0].(*idl.StopServicesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopServices indicates an expected call of StopServices.
func (mr *MockCliToHubServerMockRecorder) StopServices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServices", reflect.TypeOf((*MockCliToHubServer)(nil).StopServices), arg0, arg1)
}

// MockUnsafeCliToHubServer is a mock of UnsafeCliToHubServer interface.
type MockUnsafeCliToHubServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCliToHubServerMockRecorder
}

// MockUnsafeCliToHubServerMockRecorder is the mock recorder for MockUnsafeCliToHubServer.
type MockUnsafeCliToHubServerMockRecorder struct {
	mock *MockUnsafeCliToHubServer
}

// NewMockUnsafeCliToHubServer creates a new mock instance.
func NewMockUnsafeCliToHubServer(ctrl *gomock.Controller) *MockUnsafeCliToHubServer {
	mock := &MockUnsafeCliToHubServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCliToHubServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCliToHubServer) EXPECT() *MockUnsafeCliToHubServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCliToHubServer mocks base method.
func (m *MockUnsafeCliToHubServer) mustEmbedUnimplementedCliToHubServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCliToHubServer")
}

// mustEmbedUnimplementedCliToHubServer indicates an expected call of mustEmbedUnimplementedCliToHubServer.
func (mr *MockUnsafeCliToHubServerMockRecorder) mustEmbedUnimplementedCliToHubServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCliToHubServer", reflect.TypeOf((*MockUnsafeCliToHubServer)(nil).mustEmbedUnimplementedCliToHubServer))
}

// MockCliToHub_InitializeServer is a mock of CliToHub_InitializeServer interface.
type MockCliToHub_InitializeServer struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_InitializeServerMockRecorder
}

// MockCliToHub_InitializeServerMockRecorder is the mock recorder for MockCliToHub_InitializeServer.
type MockCliToHub_InitializeServerMockRecorder struct {
	mock *MockCliToHub_InitializeServer
}

// NewMockCliToHub_InitializeServer creates a new mock instance.
func NewMockCliToHub_InitializeServer(ctrl *gomock.Controller) *MockCliToHub_InitializeServer {
	mock := &MockCliToHub_InitializeServer{ctrl: ctrl}
	mock.recorder = &MockCliToHub_InitializeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_InitializeServer) EXPECT() *MockCliToHub_InitializeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockCliToHub_InitializeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_InitializeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_InitializeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_InitializeServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_InitializeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_InitializeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockCliToHub_InitializeServer) Send(arg0 *idl.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCliToHub_InitializeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCliToHub_InitializeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockCliToHub_InitializeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCliToHub_InitializeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCliToHub_InitializeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_InitializeServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_InitializeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_InitializeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockCliToHub_InitializeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCliToHub_InitializeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCliToHub_InitializeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCliToHub_InitializeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCliToHub_InitializeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCliToHub_InitializeServer)(nil).SetTrailer), arg0)
}

// MockCliToHub_InitializeCreateClusterServer is a mock of CliToHub_InitializeCreateClusterServer interface.
type MockCliToHub_InitializeCreateClusterServer struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_InitializeCreateClusterServerMockRecorder
}

// MockCliToHub_InitializeCreateClusterServerMockRecorder is the mock recorder for MockCliToHub_InitializeCreateClusterServer.
type MockCliToHub_InitializeCreateClusterServerMockRecorder struct {
	mock *MockCliToHub_InitializeCreateClusterServer
}

// NewMockCliToHub_InitializeCreateClusterServer creates a new mock instance.
func NewMockCliToHub_InitializeCreateClusterServer(ctrl *gomock.Controller) *MockCliToHub_InitializeCreateClusterServer {
	mock := &MockCliToHub_InitializeCreateClusterServer{ctrl: ctrl}
	mock.recorder = &MockCliToHub_InitializeCreateClusterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_InitializeCreateClusterServer) EXPECT() *MockCliToHub_InitializeCreateClusterServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockCliToHub_InitializeCreateClusterServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_InitializeCreateClusterServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_InitializeCreateClusterServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_InitializeCreateClusterServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockCliToHub_InitializeCreateClusterServer) Send(arg0 *idl.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCliToHub_InitializeCreateClusterServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockCliToHub_InitializeCreateClusterServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCliToHub_InitializeCreateClusterServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_InitializeCreateClusterServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_InitializeCreateClusterServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockCliToHub_InitializeCreateClusterServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCliToHub_InitializeCreateClusterServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCliToHub_InitializeCreateClusterServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCliToHub_InitializeCreateClusterServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCliToHub_InitializeCreateClusterServer)(nil).SetTrailer), arg0)
}

// MockCliToHub_ExecuteServer is a mock of CliToHub_ExecuteServer interface.
type MockCliToHub_ExecuteServer struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_ExecuteServerMockRecorder
}

// MockCliToHub_ExecuteServerMockRecorder is the mock recorder for MockCliToHub_ExecuteServer.
type MockCliToHub_ExecuteServerMockRecorder struct {
	mock *MockCliToHub_ExecuteServer
}

// NewMockCliToHub_ExecuteServer creates a new mock instance.
func NewMockCliToHub_ExecuteServer(ctrl *gomock.Controller) *MockCliToHub_ExecuteServer {
	mock := &MockCliToHub_ExecuteServer{ctrl: ctrl}
	mock.recorder = &MockCliToHub_ExecuteServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_ExecuteServer) EXPECT() *MockCliToHub_ExecuteServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockCliToHub_ExecuteServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_ExecuteServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_ExecuteServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_ExecuteServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_ExecuteServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_ExecuteServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockCliToHub_ExecuteServer) Send(arg0 *idl.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCliToHub_ExecuteServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCliToHub_ExecuteServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockCliToHub_ExecuteServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCliToHub_ExecuteServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCliToHub_ExecuteServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_ExecuteServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_ExecuteServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_ExecuteServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockCliToHub_ExecuteServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCliToHub_ExecuteServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCliToHub_ExecuteServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCliToHub_ExecuteServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCliToHub_ExecuteServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCliToHub_ExecuteServer)(nil).SetTrailer), arg0)
}

// MockCliToHub_FinalizeServer is a mock of CliToHub_FinalizeServer interface.
type MockCliToHub_FinalizeServer struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_FinalizeServerMockRecorder
}

// MockCliToHub_FinalizeServerMockRecorder is the mock recorder for MockCliToHub_FinalizeServer.
type MockCliToHub_FinalizeServerMockRecorder struct {
	mock *MockCliToHub_FinalizeServer
}

// NewMockCliToHub_FinalizeServer creates a new mock instance.
func NewMockCliToHub_FinalizeServer(ctrl *gomock.Controller) *MockCliToHub_FinalizeServer {
	mock := &MockCliToHub_FinalizeServer{ctrl: ctrl}
	mock.recorder = &MockCliToHub_FinalizeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_FinalizeServer) EXPECT() *MockCliToHub_FinalizeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockCliToHub_FinalizeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_FinalizeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_FinalizeServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_FinalizeServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_FinalizeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_FinalizeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockCliToHub_FinalizeServer) Send(arg0 *idl.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCliToHub_FinalizeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCliToHub_FinalizeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockCliToHub_FinalizeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCliToHub_FinalizeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCliToHub_FinalizeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_FinalizeServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_FinalizeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_FinalizeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockCliToHub_FinalizeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCliToHub_FinalizeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCliToHub_FinalizeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCliToHub_FinalizeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCliToHub_FinalizeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCliToHub_FinalizeServer)(nil).SetTrailer), arg0)
}

// MockCliToHub_RevertServer is a mock of CliToHub_RevertServer interface.
type MockCliToHub_RevertServer struct {
	ctrl     *gomock.Controller
	recorder *MockCliToHub_RevertServerMockRecorder
}

// MockCliToHub_RevertServerMockRecorder is the mock recorder for MockCliToHub_RevertServer.
type MockCliToHub_RevertServerMockRecorder struct {
	mock *MockCliToHub_RevertServer
}

// NewMockCliToHub_RevertServer creates a new mock instance.
func NewMockCliToHub_RevertServer(ctrl *gomock.Controller) *MockCliToHub_RevertServer {
	mock := &MockCliToHub_RevertServer{ctrl: ctrl}
	mock.recorder = &MockCliToHub_RevertServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCliToHub_RevertServer) EXPECT() *MockCliToHub_RevertServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockCliToHub_RevertServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCliToHub_RevertServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCliToHub_RevertServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockCliToHub_RevertServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCliToHub_RevertServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCliToHub_RevertServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockCliToHub_RevertServer) Send(arg0 *idl.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCliToHub_RevertServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCliToHub_RevertServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockCliToHub_RevertServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCliToHub_RevertServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCliToHub_RevertServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockCliToHub_RevertServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCliToHub_RevertServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCliToHub_RevertServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockCliToHub_RevertServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCliToHub_RevertServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCliToHub_RevertServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCliToHub_RevertServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCliToHub_RevertServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCliToHub_RevertServer)(nil).SetTrailer), arg0)
}
